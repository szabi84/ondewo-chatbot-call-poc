// Copyright 2021 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.nlu;

import "google/api/annotations.proto";
import "ondewo/nlu/intent.proto";
import "ondewo/nlu/common.proto";
import "ondewo/nlu/entity_type.proto";

service ProjectStatistics {
    // Project Root Statistics
    rpc GetIntentCount (GetIntentCountRequest) returns (StatResponse) {
        option (google.api.http) = {
            get: "/{parent=projects/*/agent}/intents:count"
        };
    }

    rpc GetEntityTypeCount (GetEntityTypeCountRequest) returns (StatResponse) {
        option (google.api.http) = {
            get: "/{parent=projects/*/agent}/entityTypes:count"
        };
    }

    rpc GetUserCount (GetProjectStatRequest) returns (StatResponse) {
        option (google.api.http) = {
            get: "/{parent=projects/*/agent}/users:count"
        };
    }

    rpc GetSessionCount (GetProjectStatRequest) returns (StatResponse) {
        option (google.api.http) = {
            get: "/{parent=projects/*/agent}/sessions:count"
        };
    }

    // Intent Statistics
    rpc GetTrainingPhraseCount (GetProjectElementStatRequest) returns (StatResponse) {
        option (google.api.http) = {
            get: "/{name=projects/*/agent/intents/*}/trainingPhrases:count"
        };
    }

    rpc GetResponseCount(GetProjectElementStatRequest) returns(StatResponse) {
        option (google.api.http) = {
            get: "/{name=projects/*/agent/intents/*}/responses:count"
        };
    }

    // Entity Type Statistics
    rpc GetEntityValueCount(GetProjectElementStatRequest) returns(StatResponse) {
        option (google.api.http) = {
            get: "/{name=projects/*/agent/entityTypes/*}/entities:count"
        };
    }

    // Entity Value Statistics
    rpc GetEntitySynonymCount(GetProjectElementStatRequest) returns(StatResponse) {
        option (google.api.http) = {
            get: "/{name=projects/*/agent/entityTypes/*/entityValues/*}/entitySynonyms:count"
        };
    }
}

message GetIntentCountRequest {
    // Required. The parent/path of the project to get the statistic from.
    //
    // Example:
    //      * `projects/<Project ID>/agent`
    string parent = 1;

    // Optional. Applies a filter to the list to be counted. Default, no filter.
    IntentCategory filter_by_category = 2;
}

message GetEntityTypeCountRequest {
    // Required. The parent/path of the project to get the statistic from.
    //
    // Example:
    //      * `projects/<Project ID>/agent`
    string parent = 1;

    // Optional. Applies a filter to the list to be counted. Default, no filter.
    EntityTypeCategory filter_by_category = 2;
}

message GetProjectStatRequest {
    // Required. The parent/path of the project to get the statistic from.
    //
    // Example:
    //      * `projects/<Project ID>/agent`
    string parent = 1;
}

message GetProjectElementStatRequest {
    // Required. The name/path of the concept to get the statistic from.
    //
    // Example:
    //      * `projects/<Project ID>/agent/intents/<Intent ID>`
    //      * `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`
    //      * `projects/<Project ID>/agent/entityTypes/<Entity Type ID>/entityValues/<Entity Value ID>`
    string name = 1;
    string language_code = 2;
}


